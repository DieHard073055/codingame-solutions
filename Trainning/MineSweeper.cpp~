/*
	Have you ever played Minesweeper? This cute little game comes with a certain operating system whose name we can't remember. The goal of the game is to find where all the mines are located within a M x N field.

The game shows a number in a square which tells you how many mines there are adjacent to that square. Each square has at most eight adjacent squares. The 4 x 4 field on the left contains two mines, each represented by a * character. If we represent the same field by the hint numbers described above, we end up with the field on the right:

*...
....
.*..
....
*100
2210
1*10
1110
Input

The input will consist of an arbitrary number of fields. The first line of each field contains two integers n and m ( 0 < n, m â‰¤ 100) which stand for the number of lines and columns of the field, respectively. Each of the next n lines contains exactly m characters representing the field. Safe squares are denoted by . and mine squares by *. The first field line where n = m = 0 represents the end of input and should not be processed.

Output

For each field, print the message Field #x: on a line alone, where x stands for the number of the field starting from 1. The next n lines should contain the field with the . characters replaced by the number of mines adjacent to that square. There must be an empty line between field outputs.

Sample Input

4 4
*...
....
.*..
....

3 5
**...
.....
.*...

0 0
Sample Output

Field #1:
*100
2210
1*10
1110

Field #2:
**100
33200
1*100
*/

#include <iostream>
#include <cstdlib>

using namespace std;

char getValue(char **data, int i, int j, int m, int n){
	int value = 0;
    /*Check Top*/
    if(i > 0){
        if(data[i-1][j] == '*'){
            value++;
        }
    }
    /*Check bottom*/
    if(i < n-1){
        if(data[i+1][j] == '*'){
            value++;
        }
    }
    /*Check top Left*/
    if(i > 0 && j > 0){
        if(data[i-1][j-1] == '*'){
            value++;
        }
    }
    /*Check top Right*/
    if(i > 0 && j < m-1){
        if(data[i-1][j+1] == '*'){
            value++;
        }
    }
    /*Check bottom Left*/
    if(i < n-1 && j > 0){
        if(data[i+1][j-1] == '*'){
            value++;
        }
    }
    /*Check bottom Right*/
    if(i < n-1 && j < m-1){
        if(data[i+1][j+1] == '*'){
            value++;
        }
    }
    /*Check left*/
    if(j > 0){
        if(data[i][j-1] == '*'){
            value++;
        }
    }
    /*Check right*/
    if(j < m-1){
        if(data[i][j+1] == '*'){
            value++;
        }
    }
    /*Right the value*/
    if(data[i][j] != '*'){
        data[i][j] = value +'0';
        
    }
}

int start(int test_case_num, int total_test_cases){
	int y, x;
	cin >> y;
	cin >> x;
	
	if(x == 0 && y == 0){
		return -1;
	}
	char **board;
	board = (char**) malloc(y * sizeof(char**));
	for(int i=0;i<y;i++) board[i]=(char*) malloc(x*sizeof(char*));
	
	for(int i=0;i<y;i++){
		for(int j=0;j<x;j++){
			cin >> board[i][j];
		}
	}
	for(int i=0;i<y;i++){
		for(int j=0;j<x;j++){
			getValue(board, i, j, x, y);
		}
	}
	cout << "Field #" << test_case_num << ":"<<endl;
	for(int i=0;i<y;i++){
		for(int j=0;j<x;j++){
			cout << board[i][j];
		}cout << endl;
	}cout<<endl;
	
	for(int i=0;i<y;i++) free(board[i]);
	free(board);
	
}

int main(void){
	
	/*Get the number of test cases*/
	int test_case_num = 0;
	while(1){
		test_case_num++;
		if(start(test_case_num,0) == -1){
			break;
		}
	}
	
	return 0;
}
